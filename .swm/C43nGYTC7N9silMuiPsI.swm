{
    "id": "C43nGYTC7N9silMuiPsI",
    "name": "Type Alias",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.1-0",
        "file_blobs": {
            "type_alias.py": "a4057135f2a8116500ad48d3a784e0fd5e60b289"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "`ret_type_alias` is missing type annotation - so [mypy](https://mypy.readthedocs.io/en/stable/introduction.html) is not happy.\n\nAdd the right annotation.\n\nIt would be useful to understand `Type aliases` within [kinds of types](https://mypy.readthedocs.io/en/stable/kinds_of_types.html) for that.\n\n# References\n* https://mypy.readthedocs.io/en/stable/builtin_types.html\n* https://mypy.readthedocs.io/en/stable/type_inference_and_annotations.html\n* https://mypy.readthedocs.io/en/stable/kinds_of_types.html"
        },
        {
            "firstLineNumber": 1,
            "path": "type_alias.py",
            "type": "snippet",
            "lines": [
                " import random",
                "*from typing import Union, Dict, List",
                " ",
                "*TypeAlias = Union[str, Dict[str, List[str]]]",
                " ",
                "*",
                "+def ret_type_alias():",
                "*def ret_type_alias() -> TypeAlias:",
                "     \"\"\"",
                "     return a type alias for the code",
                "     \"\"\""
            ],
            "comments": []
        },
        {
            "type": "text",
            "text": ""
        }
    ],
    "task": {
        "dod": "Make the test pass",
        "hints": [],
        "tests": [
            "mypy --strict type_alias.py"
        ]
    }
}
